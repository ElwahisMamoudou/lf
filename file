import re
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import datetime

# === ANALYSE LEXICALE ===
def lexer(date_str):
    mois_lettres = [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December",
        "Jan", "Feb", "Mar", "Apr", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
        "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre",
        "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"  
    ]
    token_specification = [
        ('NUMBER',   r'\b\d{1,4}\b'),
        ('MONTH',    r'\b(?:' + '|'.join(mois_lettres) + r')\b'),
        ('SLASH',    r'/'),
        ('DASH',     r'-'),
        ('DOT',      r'\.'),
        ('COMMA',    r','),
        ('SPACE',    r'\s+'),
        ('UNKNOWN',  r'.'),
    ]
    tok_regex = '|'.join(f'(?P<{name}>{regex})' for name, regex in token_specification)
    tokens = []
    for mo in re.finditer(tok_regex, date_str, re.IGNORECASE):
        kind = mo.lastgroup
        value = mo.group()
        if kind != 'SPACE':
            tokens.append((kind, value.lower()))  
    return tokens

# === PARSEUR : IDENTIFICATION DU FORMAT ===
def parse_date(tokens):
    def match(expected, pos):
        return pos < len(tokens) and tokens[pos][0] in expected

    # Formats numériques
    if (match(['NUMBER'], 0) and match(['SLASH'], 1) and
        match(['NUMBER'], 2) and match(['SLASH'], 3) and
        match(['NUMBER'], 4)):
        return "JJ/MM/AAAA"

    if (match(['NUMBER'], 0) and match(['DOT'], 1) and
        match(['NUMBER'], 2) and match(['DOT'], 3) and
        match(['NUMBER'], 4)):
        return "JJ.MM.AAAA"

    if (match(['NUMBER'], 0) and match(['DASH'], 1) and
        match(['NUMBER'], 2) and match(['DASH'], 3) and
        match(['NUMBER'], 4)):
        return "AAAA-MM-JJ"

    if (match(['NUMBER'], 0) and match(['DASH'], 1) and
        match(['NUMBER'], 2) and match(['DASH'], 3) and
        match(['NUMBER'], 4)):
        return "MM-JJ-AAAA"

    if (match(['NUMBER'], 0) and match(['SLASH'], 1) and
        match(['NUMBER'], 2) and match(['SLASH'], 3) and
        match(['NUMBER'], 4)):
        return "AAAA/MM/JJ"

    # Formats textuels
    if (match(['MONTH'], 0) and match(['NUMBER'], 1) and
        match(['COMMA'], 2) and match(['NUMBER'], 3)):
        return "Mois JJ, AAAA"

    if (match(['NUMBER'], 0) and match(['MONTH'], 1) and
        match(['COMMA'], 2) and match(['NUMBER'], 3)):
        return "JJ Mois, AAAA"

    if (match(['NUMBER'], 0) and match(['MONTH'], 1) and
        match(['NUMBER'], 2)):
        return "JJ Mois AAAA"

    # Nouveaux formats ajoutés
    if (match(['NUMBER'], 0) and match(['SPACE'], 1) and
        match(['MONTH'], 2) and match(['SPACE'], 3) and
        match(['NUMBER'], 4)):
        return "JJ Mois AAAA"  

    if (match(['MONTH'], 0) and match(['SPACE'], 1) and
        match(['NUMBER'], 2)):
        return "Mois JJ" 

    return None

# === CONVERSIONS ===
def month_name_to_number(name):
    mois = {
        "january": 1, "jan": 1, "janvier": 1, "i": 1,
        "february": 2, "feb": 2, "février": 2, "ii": 2,
        "march": 3, "mar": 3, "mars": 3, "iii": 3,
        "april": 4, "apr": 4, "avril": 4, "iv": 4,
        "may": 5, "mai": 5, "v": 5,
        "june": 6, "jun": 6, "juin": 6, "vi": 6,
        "july": 7, "jul": 7, "juillet": 7, "vii": 7,
        "august": 8, "aug": 8, "août": 8, "viii": 8,
        "september": 9, "sep": 9, "septembre": 9, "ix": 9,
        "october": 10, "oct": 10, "octobre": 10, "x": 10,
        "november": 11, "nov": 11, "novembre": 11, "xi": 11,
        "december": 12, "dec": 12, "décembre": 12, "xii": 12
    }
    return mois.get(name.lower(), None)

def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

def validate_date(day, month, year):
    # Gestion des années à 2 chiffres
    if year < 100:
        current_year = datetime.datetime.now().year
        century = current_year // 100 * 100
        year += century if (year + century) <= current_year else century - 100
    
    jours = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if month == 2 and is_leap_year(year):
        jours[1] = 29
    
    if not (1 <= month <= 12):
        return False, f"❌ Mois invalide : {month} (doit être entre 1 et 12)"
    
    if not (1 <= day <= jours[month - 1]):
        return False, f"❌ Jour invalide : {day} (doit être entre 1 et {jours[month-1]} pour ce mois)"
    
    return True, f"✅ Date valide : {day:02d}/{month:02d}/{year}"

# === ANALYSE COMPLÈTE ===
def analyse_date(date_str):
    tokens = lexer(date_str)
    fmt = parse_date(tokens)
    if not fmt:
        return f"❌ Format non reconnu : {date_str}", None, None
    
    try:
        day = month = year = None
        
        if fmt == "JJ/MM/AAAA" or fmt == "JJ.MM.AAAA":
            day = int(tokens[0][1])
            month = int(tokens[2][1])
            year = int(tokens[4][1])
        elif fmt == "AAAA-MM-JJ" or fmt == "AAAA/MM/JJ":
            year = int(tokens[0][1])
            month = int(tokens[2][1])
            day = int(tokens[4][1])
        elif fmt == "MM-JJ-AAAA":
            month = int(tokens[0][1])
            day = int(tokens[2][1])
            year = int(tokens[4][1])
        elif fmt == "Mois JJ, AAAA":
            month = month_name_to_number(tokens[0][1])
            day = int(tokens[1][1])
            year = int(tokens[3][1])
        elif fmt == "JJ Mois, AAAA":
            day = int(tokens[0][1])
            month = month_name_to_number(tokens[1][1])
            year = int(tokens[3][1])
        elif fmt == "JJ Mois AAAA":
            day = int(tokens[0][1])
            month = month_name_to_number(tokens[1][1])
            year = int(tokens[2][1])
        elif fmt == "Mois JJ":  
            month = month_name_to_number(tokens[0][1])
            day = int(tokens[2][1])
            year = datetime.datetime.now().year
        else:
            return f"❌ Format non géré : {fmt}", None, None

        ok, msg = validate_date(day, month, year)
        return msg, fmt, ok
    except Exception as e:
        return f"❌ Erreur lors de l'analyse de : {date_str} ({str(e)})", None, None

# === INTERFACE GRAPHIQUE ===
class DateAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.results = []
        self.setup_ui()
        
    def setup_ui(self):
        self.root.title("Analyseur de Dates Avancé - TPE Compilation")
        self.root.geometry("800x600")
        
        # Frame principale
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(expand=True, fill='both')
        
        # Section de saisie
        input_frame = tk.LabelFrame(main_frame, text="Saisie de date", padx=10, pady=10)
        input_frame.pack(fill='x', pady=5)
        
        tk.Label(input_frame, text="Entrez une date :", font=("Arial", 12)).grid(row=0, column=0, sticky='w')
        
        self.champ_date = tk.Entry(input_frame, width=40, font=("Arial", 12))
        self.champ_date.grid(row=1, column=0, padx=5, pady=5)
        self.champ_date.bind('<Return>', lambda e: self.analyser())
        
        # Boutons d'action
        btn_frame = tk.Frame(input_frame)
        btn_frame.grid(row=1, column=1, padx=10)
        
        tk.Button(btn_frame, text="Analyser", command=self.analyser, 
                 bg='#4CAF50', fg='white', font=("Arial", 10)).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="Effacer", command=self.clear_input,
                 bg='#f44336', fg='white', font=("Arial", 10)).pack(side='left', padx=5)
        
        # Section résultats
        result_frame = tk.LabelFrame(main_frame, text="Résultats", padx=10, pady=10)
        result_frame.pack(expand=True, fill='both', pady=5)
        
        # Treeview pour l'historique
        self.tree = ttk.Treeview(result_frame, columns=('date', 'format', 'validation'), show='headings', height=8)
        self.tree.heading('date', text='Date saisie')
        self.tree.heading('format', text='Format détecté')
        self.tree.heading('validation', text='Validation')
        self.tree.pack(expand=True, fill='both', pady=5)
        
        # Barre de défilement
        scrollbar = ttk.Scrollbar(result_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side='right', fill='y')
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # Boutons d'export
        export_frame = tk.Frame(main_frame)
        export_frame.pack(fill='x', pady=5)
        
        tk.Button(export_frame, text="Exporter en TXT", command=self.exporter_txt,
                 bg='#2196F3', fg='white', font=("Arial", 10)).pack(side='left', padx=5)
        
        tk.Button(export_frame, text="Exporter en CSV", command=self.exporter_csv,
                 bg='#2196F3', fg='white', font=("Arial", 10)).pack(side='left', padx=5)
    
    def analyser(self):
        date_str = self.champ_date.get()
        if not date_str.strip():
            messagebox.showwarning("Attention", "Veuillez entrer une date à analyser")
            return
            
        resultat, fmt, is_valid = analyse_date(date_str)
        
        # Ajout à l'historique
        self.results.append({
            'date': date_str,
            'format': fmt if fmt else "Inconnu",
            'validation': "Valide" if is_valid else "Invalide",
            'message': resultat
        })
        
        # Mise à jour du Treeview
        self.tree.insert('', 'end', values=(
            date_str,
            fmt if fmt else "Inconnu",
            "Valide" if is_valid else "Invalide"
        ))
        
        # Sélectionner la dernière entrée
        self.tree.selection_set(self.tree.get_children()[-1])
        self.tree.see(self.tree.get_children()[-1])
    
    def clear_input(self):
        self.champ_date.delete(0, 'end')
    
    def exporter_txt(self):
        if not self.results:
            messagebox.showinfo("Export impossible", "Aucun résultat à exporter.")
            return
            
        fichier = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")])
            
        if fichier:
            with open(fichier, "w", encoding="utf-8") as f:
                f.write("Historique d'analyse de dates\n")
                f.write("="*30 + "\n\n")
                for res in self.results:
                    f.write(f"Date: {res['date']}\n")
                    f.write(f"Format: {res['format']}\n")
                    f.write(f"Résultat: {res['message']}\n")
                    f.write("-"*30 + "\n")
            messagebox.showinfo("Succès", f"Résultats exportés dans {fichier}")
    
    def exporter_csv(self):
        if not self.results:
            messagebox.showinfo("Export impossible", "Aucun résultat à exporter.")
            return
            
        fichier = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("Fichiers CSV", "*.csv"), ("Tous les fichiers", "*.*")])
            
        if fichier:
            with open(fichier, "w", encoding="utf-8") as f:
                f.write("Date;Format;Validation;Message\n")
                for res in self.results:
                    f.write(f"{res['date']};{res['format']};{res['validation']};{res['message']}\n")
            messagebox.showinfo("Succès", f"Résultats exportés dans {fichier}")

# === LANCEMENT DE L'APPLICATION ===
if __name__ == "__main__":
    root = tk.Tk()
    app = DateAnalyzerApp(root)
    root.mainloop()
